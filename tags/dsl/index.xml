<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DSL on Ilya Bylich - Blog</title><link>https://iliabylich.github.io/tags/dsl/</link><description>Recent content in DSL on Ilya Bylich - Blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 26 May 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://iliabylich.github.io/tags/dsl/index.xml" rel="self" type="application/rss+xml"/><item><title>What is Ruby DSL</title><link>https://iliabylich.github.io/2015-05-26-what-is-ruby-dsl/</link><pubDate>Tue, 26 May 2015 00:00:00 +0000</pubDate><guid>https://iliabylich.github.io/2015-05-26-what-is-ruby-dsl/</guid><description>&lt;h2 id="what-is-ruby-dsl">What is Ruby DSL?&lt;/h2>
&lt;p>As you already know, DSL means domain-specific language. It&amp;rsquo;s like a language in a language. Here are some examples that we use every day:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">User&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">attr_reader&lt;/span> &lt;span style="color:#e6db74">:name&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Profile&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#66d9ef">ActiveRecord&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#66d9ef">Base&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> has_many &lt;span style="color:#e6db74">:posts&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ApiController&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#66d9ef">ActionController&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#66d9ef">Base&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> before_action &lt;span style="color:#e6db74">:authenticate&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>But all these examples use rails-provided DSL, how about your own? First of all, you should know that all these methods (&lt;code>attr_reader&lt;/code>, &lt;code>has_many&lt;/code> and &lt;code>before_action&lt;/code>) are actually class-methods of &lt;code>Module&lt;/code>, &lt;code>ActiveRecord::Base&lt;/code> and &lt;code>ActionController::Base&lt;/code>. So you can write something like:&lt;/p></description></item></channel></rss>