<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DSL on Ilya Bylich - Blog</title><link>https://iliabylich.github.io/tags/dsl/</link><description>Recent content in DSL on Ilya Bylich - Blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 26 May 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://iliabylich.github.io/tags/dsl/index.xml" rel="self" type="application/rss+xml"/><item><title>What is Ruby DSL</title><link>https://iliabylich.github.io/2015-05-26-what-is-ruby-dsl/</link><pubDate>Tue, 26 May 2015 00:00:00 +0000</pubDate><guid>https://iliabylich.github.io/2015-05-26-what-is-ruby-dsl/</guid><description>What is Ruby DSL? As you already know, DSL means domain-specific language. It&amp;rsquo;s like a language in a language. Here are some examples that we use every day:
class User attr_reader :name end class Profile &amp;lt; ActiveRecord::Base has_many :posts end class ApiController &amp;lt; ActionController::Base before_action :authenticate end But all these examples use rails-provided DSL, how about your own? First of all, you should know that all these methods (attr_reader, has_many and before_action) are actually class-methods of Module, ActiveRecord::Base and ActionController::Base.</description></item></channel></rss>