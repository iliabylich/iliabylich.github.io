<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Serialization on Ilya Bylich - Blog</title><link>https://iliabylich.github.io/tags/serialization/</link><description>Recent content in Serialization on Ilya Bylich - Blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 26 Jan 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://iliabylich.github.io/tags/serialization/index.xml" rel="self" type="application/rss+xml"/><item><title>Ruby Marshalling from A to Z</title><link>https://iliabylich.github.io/2016-01-26-ruby-marshalling-from-a-to-z/</link><pubDate>Tue, 26 Jan 2016 00:00:00 +0000</pubDate><guid>https://iliabylich.github.io/2016-01-26-ruby-marshalling-from-a-to-z/</guid><description>What is Marshalling Marshalling is a serialization process when you convert an object to a binary string. Ruby has a standard class Marshal that does all the job for serialization and deserialization. To serialize an object, use Marshal.dump, to deserialize - Marshal.load or Marshal.restore.
marshalled = Marshal.dump([1, 2, &amp;#39;string&amp;#39;, Object.new]) # =&amp;gt; &amp;#34;\x04\b[\ti\x06i\aI\&amp;#34;\vstring\x06:\x06ETo:\vObject\x00&amp;#34; Marshal.load(marshalled) # =&amp;gt; [1, 2, &amp;#34;string&amp;#34;, #&amp;lt;Object:0x00000002643000&amp;gt;] This article explains the format of marshalling and shows how to write a pure Ruby marshalling library compatible with the standard Ruby implementation.</description></item></channel></rss>