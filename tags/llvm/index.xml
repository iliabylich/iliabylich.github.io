<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>LLVM on Ilya Bylich - Blog</title><link>https://iliabylich.github.io/tags/llvm/</link><description>Recent content in LLVM on Ilya Bylich - Blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 28 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://iliabylich.github.io/tags/llvm/index.xml" rel="self" type="application/rss+xml"/><item><title>Writing bindings upside down</title><link>https://iliabylich.github.io/2021-12-28-writing-bindings-upside-down/</link><pubDate>Tue, 28 Dec 2021 00:00:00 +0000</pubDate><guid>https://iliabylich.github.io/2021-12-28-writing-bindings-upside-down/</guid><description>Bindings Quite a long time ago I started writing C/C++/Ruby/Node.js/WASM bindings so I could call my Rust project from those languages. It is a Ruby language parser.
I tried multiple ways and found one that is very (VERY) controversial, but I think it deserves it&amp;rsquo;s own article.
Traditional way Let&amp;rsquo;s say you have a library in C. Just for simplicity, Rust is not special here.
How can you use it in C++?</description></item></channel></rss>