<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rust on Ilya Bylich - Blog</title><link>https://iliabylich.github.io/tags/rust/</link><description>Recent content in Rust on Ilya Bylich - Blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Wed, 19 Mar 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://iliabylich.github.io/tags/rust/index.xml" rel="self" type="application/rss+xml"/><item><title>Ruby, Ractors, and Lock-Free Data Structures</title><link>https://iliabylich.github.io/2025-03-19-ruby-ractors-and-lock-free-data-structures/</link><pubDate>Wed, 19 Mar 2025 00:00:00 +0000</pubDate><guid>https://iliabylich.github.io/2025-03-19-ruby-ractors-and-lock-free-data-structures/</guid><description/></item><item><title>Arena-based parsers</title><link>https://iliabylich.github.io/2024-05-09-arena-based-parsers/</link><pubDate>Thu, 09 May 2024 00:00:00 +0000</pubDate><guid>https://iliabylich.github.io/2024-05-09-arena-based-parsers/</guid><description/></item><item><title>Writing bindings upside down</title><link>https://iliabylich.github.io/2021-12-28-writing-bindings-upside-down/</link><pubDate>Tue, 28 Dec 2021 00:00:00 +0000</pubDate><guid>https://iliabylich.github.io/2021-12-28-writing-bindings-upside-down/</guid><description>&lt;h2 id="bindings">Bindings&lt;/h2>
&lt;p>Quite a long time ago I started writing C/C++/Ruby/Node.js/WASM bindings so I could call &lt;a href="https://github.com/lib-ruby-parser/lib-ruby-parser" target="_blank" rel="noreferrer nofollow">my Rust project&lt;/a>
 from those languages. It is a Ruby language parser.&lt;/p>
&lt;p>I tried multiple ways and found one that is very (VERY) controversial, but I think it deserves it&amp;rsquo;s own article.&lt;/p>
&lt;h2 id="traditional-way">Traditional way&lt;/h2>
&lt;p>Let&amp;rsquo;s say you have a library in C. Just for simplicity, Rust is not special here.&lt;/p>
&lt;p>&lt;p class="imgp">
 &lt;img loading="lazy" src="https://iliabylich.github.io/writing-bindings-upside-down-1.png" alt="library-puzzle-piece.png" />
&lt;/p>
&lt;/p>
&lt;p>How can you use it in C++? A very simple solution is to wrap your header file with&lt;/p></description></item><item><title>lib-ruby-parser</title><link>https://iliabylich.github.io/2020-11-23-lib-ruby-parser/</link><pubDate>Mon, 23 Nov 2020 00:00:00 +0000</pubDate><guid>https://iliabylich.github.io/2020-11-23-lib-ruby-parser/</guid><description>&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>So, I&amp;rsquo;m ready to announce that I have finished working on a new Ruby parser. It&amp;rsquo;s called &lt;code>lib-ruby-parser&lt;/code>.&lt;/p>
&lt;p>Key features:&lt;/p>
&lt;ol>
&lt;li>It&amp;rsquo;s fast. It&amp;rsquo;s written in Rust and it&amp;rsquo;s slightly faster than Ripper. The difference is about 1-2% on my machine.&lt;/li>
&lt;li>It has a beautiful interface. Every single node has its own type that is documented. For example, take a look at &lt;a href="https://docs.rs/lib-ruby-parser/0.7.0/lib_ruby_parser/nodes/struct.CSend.html" target="_blank" rel="noreferrer nofollow">&lt;code>CSend&lt;/code> node&lt;/a>
 that represents &amp;ldquo;conditional send&amp;rdquo; like &lt;code>foo&amp;amp;.bar&lt;/code>. &lt;a href="https://docs.rs/lib-ruby-parser/0.7.0/lib_ruby_parser/nodes/index.html" target="_blank" rel="noreferrer nofollow">Here&amp;rsquo;s a list of all defined nodes&lt;/a>
. Both Ripper and &lt;code>RubyVM::AST&lt;/code> have no documentation of their AST format. &lt;code>whitequark/parser&lt;/code> &lt;a href="https://github.com/whitequark/parser/blob/master/doc/AST_FORMAT.md" target="_blank" rel="noreferrer nofollow">has a great documentation&lt;/a>
, but its AST is not &amp;ldquo;static&amp;rdquo;.&lt;/li>
&lt;li>What&amp;rsquo;s &amp;ldquo;static AST&amp;rdquo;? By saying that I mean that if documentation says that &amp;ldquo;N is not-nullable&amp;rdquo; then it&amp;rsquo;s true no matter what. &lt;code>whitequark/parser&lt;/code> does a great job, but the nature of dynamic language does not allow it to provide such guarantees. I&amp;rsquo;ll show a few examples later.&lt;/li>
&lt;li>It&amp;rsquo;s precise. Unlike &lt;code>whitequark/parser&lt;/code>, its lexer (or tokenizer if it sounds better for you) is based on MRI&amp;rsquo;s &lt;code>parse.y&lt;/code>. What does it mean? It means that I was not able to find any difference in tokenizing on 3 million lines of code that I have got by pulling sources of top 300 gems (by total downloads). I&amp;rsquo;ll mention how I track it soon.&lt;/li>
&lt;li>It does not depend on Ruby. In fact, it has absolutely no &amp;ldquo;required&amp;rdquo; dependencies (only a few optional ones). So, it&amp;rsquo;s possible to write bindings for any other language, and I have made them for C/C++/Node.js. Of course, it&amp;rsquo;s possible to have bindings for Ruby (because there are bindings for C and it&amp;rsquo;s easy to reuse them)&lt;/li>
&lt;/ol>
&lt;h2 id="implementation">Implementation&lt;/h2>
&lt;p>Current performance (in release mode, with &lt;code>jemalloc&lt;/code>) is ~200000 LOC/s. I think it can even be used for syntax highlighting (and in the browser, too, haha).&lt;/p></description></item></channel></rss>