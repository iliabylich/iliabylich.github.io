<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tags</title><link>https://iliabylich.github.io/tags/</link><description>Recent content on Ilya Bylich - Blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Wed, 19 Mar 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://iliabylich.github.io/tags/index.xml" rel="self" type="application/rss+xml"/><item><title>Ruby, Ractors, and Lock-Free Data Structures</title><link>https://iliabylich.github.io/ruby-ractors-and-lock-free-data-structures/</link><pubDate>Wed, 19 Mar 2025 00:00:00 +0000</pubDate><guid>https://iliabylich.github.io/ruby-ractors-and-lock-free-data-structures/</guid><description/></item><item><title>Arena-based parsers</title><link>https://iliabylich.github.io/arena-based-parsers</link><pubDate>Thu, 09 May 2024 00:00:00 +0000</pubDate><guid>https://iliabylich.github.io/arena-based-parsers</guid><description/></item><item><title>Writing bindings upside down</title><link>/2021-12-28-writing-bindings-upside-down/</link><pubDate>Tue, 28 Dec 2021 00:00:00 +0000</pubDate><guid>/2021-12-28-writing-bindings-upside-down/</guid><description>&lt;h2 id="bindings">Bindings&lt;/h2>
&lt;p>Quite a long time ago I started writing C/C++/Ruby/Node.js/WASM bindings so I could call &lt;a href="https://github.com/lib-ruby-parser/lib-ruby-parser" target="_blank" rel="noreferrer nofollow">my Rust project&lt;/a>
 from those languages. It is a Ruby language parser.&lt;/p>
&lt;p>I tried multiple ways and found one that is very (VERY) controversial, but I think it deserves it&amp;rsquo;s own article.&lt;/p>
&lt;h2 id="traditional-way">Traditional way&lt;/h2>
&lt;p>Let&amp;rsquo;s say you have a library in C. Just for simplicity, Rust is not special here.&lt;/p>
&lt;p>&lt;p class="imgp">
 &lt;img loading="lazy" src="library-puzzle-piece.png" alt="library-puzzle-piece.png" />
&lt;/p>
&lt;/p>
&lt;p>How can you use it in C++? A very simple solution is to wrap your header file with&lt;/p></description></item><item><title>lib-ruby-parser</title><link>/2020-11-23-lib-ruby-parser/</link><pubDate>Mon, 23 Nov 2020 00:00:00 +0000</pubDate><guid>/2020-11-23-lib-ruby-parser/</guid><description>&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>So, I&amp;rsquo;m ready to announce that I have finished working on a new Ruby parser. It&amp;rsquo;s called &lt;code>lib-ruby-parser&lt;/code>.&lt;/p>
&lt;p>Key features:&lt;/p>
&lt;ol>
&lt;li>It&amp;rsquo;s fast. It&amp;rsquo;s written in Rust and it&amp;rsquo;s slightly faster than Ripper. The difference is about 1-2% on my machine.&lt;/li>
&lt;li>It has a beautiful interface. Every single node has its own type that is documented. For example, take a look at &lt;a href="https://docs.rs/lib-ruby-parser/0.7.0/lib_ruby_parser/nodes/struct.CSend.html" target="_blank" rel="noreferrer nofollow">&lt;code>CSend&lt;/code> node&lt;/a>
 that represents &amp;ldquo;conditional send&amp;rdquo; like &lt;code>foo&amp;amp;.bar&lt;/code>. &lt;a href="https://docs.rs/lib-ruby-parser/0.7.0/lib_ruby_parser/nodes/index.html" target="_blank" rel="noreferrer nofollow">Here&amp;rsquo;s a list of all defined nodes&lt;/a>
. Both Ripper and &lt;code>RubyVM::AST&lt;/code> have no documentation of their AST format. &lt;code>whitequark/parser&lt;/code> &lt;a href="https://github.com/whitequark/parser/blob/master/doc/AST_FORMAT.md" target="_blank" rel="noreferrer nofollow">has a great documentation&lt;/a>
, but its AST is not &amp;ldquo;static&amp;rdquo;.&lt;/li>
&lt;li>What&amp;rsquo;s &amp;ldquo;static AST&amp;rdquo;? By saying that I mean that if documentation says that &amp;ldquo;N is not-nullable&amp;rdquo; then it&amp;rsquo;s true no matter what. &lt;code>whitequark/parser&lt;/code> does a great job, but the nature of dynamic language does not allow it to provide such guarantees. I&amp;rsquo;ll show a few examples later.&lt;/li>
&lt;li>It&amp;rsquo;s precise. Unlike &lt;code>whitequark/parser&lt;/code>, its lexer (or tokenizer if it sounds better for you) is based on MRI&amp;rsquo;s &lt;code>parse.y&lt;/code>. What does it mean? It means that I was not able to find any difference in tokenizing on 3 million lines of code that I have got by pulling sources of top 300 gems (by total downloads). I&amp;rsquo;ll mention how I track it soon.&lt;/li>
&lt;li>It does not depend on Ruby. In fact, it has absolutely no &amp;ldquo;required&amp;rdquo; dependencies (only a few optional ones). So, it&amp;rsquo;s possible to write bindings for any other language, and I have made them for C/C++/Node.js. Of course, it&amp;rsquo;s possible to have bindings for Ruby (because there are bindings for C and it&amp;rsquo;s easy to reuse them)&lt;/li>
&lt;/ol>
&lt;h2 id="implementation">Implementation&lt;/h2>
&lt;p>Current performance (in release mode, with &lt;code>jemalloc&lt;/code>) is ~200000 LOC/s. I think it can even be used for syntax highlighting (and in the browser, too, haha).&lt;/p></description></item><item><title>Evaluating Ruby in Ruby</title><link>/2020-01-26-evaluating-ruby-in-ruby/</link><pubDate>Sun, 26 Jan 2020 00:00:00 +0000</pubDate><guid>/2020-01-26-evaluating-ruby-in-ruby/</guid><description>&lt;h2 id="tldr">TL;DR&lt;/h2>
&lt;p>This article is about instruction sequences and evaluating them using pure Ruby.&lt;/p>
&lt;p>The repository is available &lt;a href="https://github.com/iliabylich/my.rb" target="_blank" rel="noreferrer nofollow">here&lt;/a>
.&lt;/p>
&lt;blockquote>
&lt;p>Is it a Ruby implementation?&lt;/p>&lt;/blockquote>
&lt;p>No. It&amp;rsquo;s just a runner of instructions. It is similar to MRI&amp;rsquo;s virtual machine, but it lacks many features and it&amp;rsquo;s 100 times slower.&lt;/p>
&lt;blockquote>
&lt;p>Can I use it in my applications?&lt;/p>&lt;/blockquote>
&lt;p>Of course, no. Well, if you want.&lt;/p>
&lt;blockquote>
&lt;p>Does it work at all?&lt;/p>&lt;/blockquote>
&lt;p>Yes, and it even passes most language specs from RubySpec test suite.&lt;/p></description></item><item><title>My favorite parts of Ruby</title><link>/2018-07-19-my-favorite-parts-of-ruby/</link><pubDate>Thu, 19 Jul 2018 00:00:00 +0000</pubDate><guid>/2018-07-19-my-favorite-parts-of-ruby/</guid><description>&lt;h2 id="before-we-start">Before we start&lt;/h2>
&lt;p>&lt;strong>Disclaimer #1&lt;/strong> first of all I&amp;rsquo;d like to say that I really like Ruby. I write a ton of Ruby code every single day and I prefer it over other languages. Please, do not take it seriously, Ruby is nice, and this post is mostly a joke.&lt;/p>
&lt;p>&lt;strong>Disclaimer #2&lt;/strong> I&amp;rsquo;m not going to cover popular things like flip-flops (thanks God they are deprecated in 2.6.0).&lt;/p>
&lt;p>I was thinking for a while which item should go first, but finally I had to give up. I think all items are funny.&lt;/p></description></item><item><title>Ruby Marshalling from A to Z</title><link>/2016-01-26-ruby-marshalling-from-a-to-z/</link><pubDate>Tue, 26 Jan 2016 00:00:00 +0000</pubDate><guid>/2016-01-26-ruby-marshalling-from-a-to-z/</guid><description>&lt;h2 id="what-is-marshalling">What is Marshalling&lt;/h2>
&lt;p>Marshalling is a serialization process when you convert an object to a binary string.
Ruby has a standard class &lt;code>Marshal&lt;/code> that does all the job for serialization and deserialization.
To serialize an object, use &lt;code>Marshal.dump&lt;/code>, to deserialize - &lt;code>Marshal.load&lt;/code> or &lt;code>Marshal.restore&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>marshalled &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">Marshal&lt;/span>&lt;span style="color:#f92672">.&lt;/span>dump(&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;string&amp;#39;&lt;/span>, &lt;span style="color:#66d9ef">Object&lt;/span>&lt;span style="color:#f92672">.&lt;/span>new&lt;span style="color:#f92672">]&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># =&amp;gt; &amp;#34;\x04\b[\ti\x06i\aI\&amp;#34;\vstring\x06:\x06ETo:\vObject\x00&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">Marshal&lt;/span>&lt;span style="color:#f92672">.&lt;/span>load(marshalled)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># =&amp;gt; [1, 2, &amp;#34;string&amp;#34;, #&amp;lt;Object:0x00000002643000&amp;gt;]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This article explains the format of marshalling and shows how to write a pure Ruby marshalling library
compatible with the standard Ruby implementation.&lt;/p></description></item><item><title>HandlerSocket + Ruby</title><link>/2015-11-10-handlersocket-with-ruby/</link><pubDate>Tue, 10 Nov 2015 00:00:00 +0000</pubDate><guid>/2015-11-10-handlersocket-with-ruby/</guid><description>&lt;h2 id="what-is-handlersocket-hs">What is HandlerSocket (HS)&lt;/h2>
&lt;ul>
&lt;li>a plugin for MySQL&lt;/li>
&lt;li>which allows you to read/write to MySQL&lt;/li>
&lt;li>and gives you a separate connection to MySQL&lt;/li>
&lt;li>and does not allow you to run SQL queries&lt;/li>
&lt;li>but allows to run simple CRUD queries &lt;em>only&lt;/em> using indexes&lt;/li>
&lt;/ul>
&lt;p>HandlerSocket query language is very simple (I&amp;rsquo;d even say it&amp;rsquo;s primitive), but it&amp;rsquo;s much faster than MySQL&amp;rsquo;s one. Though, of course, there are some limitations. Interested?&lt;/p>
&lt;h2 id="installation">Installation&lt;/h2>
&lt;p>You already have it if you are using Percona Server or MariaDB. If not, install it from &lt;a href="https://github.com/DeNA/HandlerSocket-Plugin-for-MySQL" target="_blank" rel="noreferrer nofollow">the source&lt;/a>
.&lt;/p></description></item><item><title>Saving execution context for later debugging</title><link>/2015-08-21-saving-execution-context-for-later-debugging/</link><pubDate>Fri, 21 Aug 2015 00:00:00 +0000</pubDate><guid>/2015-08-21-saving-execution-context-for-later-debugging/</guid><description>&lt;h2 id="the-problem">The problem&lt;/h2>
&lt;p>Consider the following situation: you have got an exception in production. Of course, all of us are good developers, but you know, sometimes *it just happens. What do you usually do to get some information about the error? You just grab the request parameters to test it locally, right? Then I might have a better solution for you: dump your memory once an error happens and restore the dump later to debug it.&lt;/p></description></item><item><title>Wrapping JavaScript library with Opal</title><link>/2015-07-23-wrapping-javascript-library-with-opal/</link><pubDate>Thu, 23 Jul 2015 00:00:00 +0000</pubDate><guid>/2015-07-23-wrapping-javascript-library-with-opal/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>The task that is solved here is not real, but it&amp;rsquo;s still a good example of (probably?) real work with Opal. I could choose some complex enough JavaScript library and write a simple wrapper using Opal, but there&amp;rsquo;s no fun. Instead, let&amp;rsquo;s write a wrapper for existing rich client-side application (it may show you how to wrap your existing application logic). Well, wrapper for something like a client-side scheduler may sound boring, so I have chosen a JavaScript-based browser game called &lt;a href="http://browserquest.mozilla.org" target="_blank" rel="noreferrer nofollow">&lt;code>BrowserQuest&lt;/code>&lt;/a>
 &lt;a href="https://github.com/mozilla/BrowserQuest" target="_blank" rel="noreferrer nofollow">written&lt;/a>
 by Mozilla, and I&amp;rsquo;ll show you how to write a bot for it using Opal.&lt;/p></description></item><item><title>Capybara and asynchronous stuff</title><link>/2015-07-01-capybara-and-asynchronous-stuff/</link><pubDate>Wed, 01 Jul 2015 00:00:00 +0000</pubDate><guid>/2015-07-01-capybara-and-asynchronous-stuff/</guid><description>&lt;h2 id="what-is-capybara-poltergeist-and-phantomjs">What is Capybara, Poltergeist and PhantomJS?&lt;/h2>
&lt;p>In this part I will try to cover the following aspects:&lt;/p>
&lt;ol>
&lt;li>Running asynchronous code in a web driver&lt;/li>
&lt;li>Making the call synchronous&lt;/li>
&lt;li>Wrapping it into some common solution&lt;/li>
&lt;li>Advanced example - working with IndexedDB from Capybara&lt;/li>
&lt;/ol>
&lt;h3 id="phantomjs">PhantomJS&lt;/h3>
&lt;p>First of all, we need to know what is PhantomJS. I would say it&amp;rsquo;s a &amp;rsquo;tool that acts like a browser but can be controlled from outside using simple command interface&amp;rsquo;. In more common words, it&amp;rsquo;s a web driver. It&amp;rsquo;s a full-featured WebKit (an engine of Chrome/Safari/few last versions of Opera and other browsers), but in console. You can use it for scripting, automating or testing.&lt;/p></description></item><item><title>Apipie - amazing tool for documenting your Rails API</title><link>/2015-06-08-apipie-amazing-tool-for-documenting-your-rails-api/</link><pubDate>Mon, 08 Jun 2015 00:00:00 +0000</pubDate><guid>/2015-06-08-apipie-amazing-tool-for-documenting-your-rails-api/</guid><description>&lt;h2 id="apipie">Apipie&lt;/h2>
&lt;p>This article is about &lt;a href="https://github.com/Apipie/apipie-rails" target="_blank" rel="noreferrer nofollow">Apipie gem&lt;/a>
 which provides a DSL for documenting your API. I will try to cover features that I personally use on my project.&lt;/p>
&lt;p>Comparing to other tools for generating API documentation (&lt;code>yardoc&lt;/code>, &lt;code>sdoc&lt;/code>) I would say that the main thing that you gain with Apipie is that your documentation is a real ruby code, so you can write computations, concerns etc.&lt;/p>
&lt;p>Here is a simple example of how it looks in code:&lt;/p></description></item><item><title>What is Ruby DSL</title><link>/2015-05-26-what-is-ruby-dsl/</link><pubDate>Tue, 26 May 2015 00:00:00 +0000</pubDate><guid>/2015-05-26-what-is-ruby-dsl/</guid><description>&lt;h2 id="what-is-ruby-dsl">What is Ruby DSL?&lt;/h2>
&lt;p>As you already know, DSL means domain-specific language. It&amp;rsquo;s like a language in a language. Here are some examples that we use every day:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">User&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">attr_reader&lt;/span> &lt;span style="color:#e6db74">:name&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Profile&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#66d9ef">ActiveRecord&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#66d9ef">Base&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> has_many &lt;span style="color:#e6db74">:posts&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ApiController&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#66d9ef">ActionController&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#66d9ef">Base&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> before_action &lt;span style="color:#e6db74">:authenticate&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>But all these examples use rails-provided DSL, how about your own? First of all, you should know that all these methods (&lt;code>attr_reader&lt;/code>, &lt;code>has_many&lt;/code> and &lt;code>before_action&lt;/code>) are actually class-methods of &lt;code>Module&lt;/code>, &lt;code>ActiveRecord::Base&lt;/code> and &lt;code>ActionController::Base&lt;/code>. So you can write something like:&lt;/p></description></item><item><title>Experimental MySQL HTTP API and Ruby</title><link>/2015-05-14-experimental-mysql-http-api-and-ruby/</link><pubDate>Thu, 14 May 2015 00:00:00 +0000</pubDate><guid>/2015-05-14-experimental-mysql-http-api-and-ruby/</guid><description>&lt;h2 id="http-api">HTTP API&lt;/h2>
&lt;p>Yes, MySQL has an HTTP API which is:&lt;/p>
&lt;ol>
&lt;li>an experimental feature&lt;/li>
&lt;li>it ships as a native plugin &lt;a href="http://labs.mysql.com/?id=3" target="_blank" rel="noreferrer nofollow">only for 5.7 version&lt;/a>
&lt;/li>
&lt;/ol>
&lt;p>Basically, it allows you to work with your database in the following ways:&lt;/p>
&lt;ol>
&lt;li>as an SQL endpoint&lt;/li>
&lt;li>as a CRUD endpoint&lt;/li>
&lt;li>as a JSON document endpoint&lt;/li>
&lt;/ol>
&lt;h2 id="sql-endpoint">SQL endpoint&lt;/h2>
&lt;p>It gives an ability to run queries like&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>GET http://host:port/sql/:database/:query
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>For example&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>GET http://localhost:8080/sql/testdb/SELECT+1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>is a synonym of SQL&amp;rsquo;s &lt;code>SELECT 1&lt;/code>.&lt;/p></description></item><item><title>ExceptionManager gem</title><link>/2015-04-14-exception-manager-gem/</link><pubDate>Tue, 14 Apr 2015 00:00:00 +0000</pubDate><guid>/2015-04-14-exception-manager-gem/</guid><description>&lt;h2 id="what-is-this">What is this?&lt;/h2>
&lt;p>&lt;code>ExceptionManager&lt;/code> is a gem for getting extra information from your exception.&lt;/p>
&lt;p>Source code: &lt;a href="https://github.com/iliabylich/exception_manager" target="_blank" rel="noreferrer nofollow">https://github.com/iliabylich/exception_manager&lt;/a>
&lt;/p>
&lt;p>With this gem every time when you get an exception, it&amp;rsquo;s possible to grab &lt;code>subject&lt;/code> of exception (the instance of class where &lt;code>raise&lt;/code> happened), &lt;code>locals&lt;/code> - local variables, &lt;code>subject_instance_variables&lt;/code> and &lt;code>subject_class_variables&lt;/code>&lt;/p>
&lt;p>Examples:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>require &lt;span style="color:#e6db74">&amp;#39;exception_manager&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">ExceptionManager&lt;/span>&lt;span style="color:#f92672">.&lt;/span>enable!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">TestClassThatRaisesException&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> @@class_variable &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">:class_value&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">test_error&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>args)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> @instance_variable &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">:instance_value&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">raise&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Test error&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">TestClassThatRaisesException&lt;/span>&lt;span style="color:#f92672">.&lt;/span>new&lt;span style="color:#f92672">.&lt;/span>test_error(&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">rescue&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> e
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts &lt;span style="color:#e6db74">&amp;#34;Subject: &lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>e&lt;span style="color:#f92672">.&lt;/span>subject&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts &lt;span style="color:#e6db74">&amp;#34;Locals: &lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>e&lt;span style="color:#f92672">.&lt;/span>locals&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts &lt;span style="color:#e6db74">&amp;#34;Instance variables: &lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>e&lt;span style="color:#f92672">.&lt;/span>subject_instance_variables&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts &lt;span style="color:#e6db74">&amp;#34;Class variables: &lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>e&lt;span style="color:#f92672">.&lt;/span>subject_class_variables&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts &lt;span style="color:#e6db74">&amp;#34;Summary: &lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>e&lt;span style="color:#f92672">.&lt;/span>summary&lt;span style="color:#f92672">.&lt;/span>inspect&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This code snippet prints:&lt;/p></description></item><item><title>Redis Cluster. Quick overview.</title><link>/2015-04-13-redis-cluster-quick-overview/</link><pubDate>Mon, 13 Apr 2015 00:00:00 +0000</pubDate><guid>/2015-04-13-redis-cluster-quick-overview/</guid><description>&lt;p>Today I have tested version 3.0.0 of Redis server which includes Redis cluster. Here are some first thoughts about this.&lt;/p>
&lt;h2 id="setup">Setup&lt;/h2>
&lt;p>Here are my servers:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span># 212.71.252.54 / 192.168.171.141 / node1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span># 176.58.103.254 / 192.168.171.142 / node2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span># 178.79.153.89 / 192.168.173.227 / node3
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Local hosts (on each server):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span># local hosts
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>192.168.171.141 node1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>192.168.171.142 node2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>192.168.173.227 node3
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And remote (on my PC):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span># remote hosts
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>212.71.252.54 node1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>176.58.103.254 node2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>178.79.153.89 node3
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>First of all, let&amp;rsquo;s download and extract it (on each node).&lt;/p></description></item></channel></rss>