<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Opal on Ilya Bylich - Blog</title><link>https://iliabylich.github.io/tags/opal/</link><description>Recent content in Opal on Ilya Bylich - Blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 23 Jul 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://iliabylich.github.io/tags/opal/index.xml" rel="self" type="application/rss+xml"/><item><title>Wrapping JavaScript library with Opal</title><link>https://iliabylich.github.io/2015-07-23-wrapping-javascript-library-with-opal/</link><pubDate>Thu, 23 Jul 2015 00:00:00 +0000</pubDate><guid>https://iliabylich.github.io/2015-07-23-wrapping-javascript-library-with-opal/</guid><description>Introduction The task that is solved here is not real, but it&amp;rsquo;s still a good example of (probably?) real work with Opal. I could choose some complex enough JavaScript library and write a simple wrapper using Opal, but there&amp;rsquo;s no fun. Instead, let&amp;rsquo;s write a wrapper for existing rich client-side application (it may show you how to wrap your existing application logic). Well, wrapper for something like a client-side scheduler may sound boring, so I have chosen a JavaScript-based browser game called BrowserQuest written by Mozilla, and I&amp;rsquo;ll show you how to write a bot for it using Opal.</description></item></channel></rss>